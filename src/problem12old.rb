# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

# primos = File.read("primos").split("[")
# primos = primos[1].split("]")
# primos = primos[0].split(",")

class Fixnum
  def number_of_divisors
    divisors = 2
    (2...self).each {|n| divisors +=1 if self % n == 0}
    return divisors
  end
end

triangle = 1
n = 1
while triangle.number_of_divisors < 500
  puts triangle
  n += 1
  previous_triangle = triangle
  triangle = previous_triangle + n
end
 
puts triangle

# triangle = 1
# divisors = 1
# i = 1

# while true do
#   for number in 1..triangle
#     # print "#{divisors} "
#     # puts "#{triangle}"
#     divisors += 1 if triangle % number == 0
#   end
#   print "#{divisors} #{i} "
#   puts "#{triangle}"
#   break if divisors >= 500
#   i += 1
#   triangle += i
#   divisors = 1
#   puts " "
# end

# puts triangle


# divisors = 2
# (2...self).each {|n| divisors +=1 if self % n == 0}
# divisors


#76576500